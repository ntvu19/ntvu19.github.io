import{_ as s,e as a,g as t,o as p}from"./app-DFqNa0KN.js";const e="/assets/js-6xm4dl3H.png",c="/assets/hoisting-in-js-C36aTGHS.png",i="/assets/static_vs_dynamic_typing-BP2Ti8wl.png",o="/assets/passed_by_value-DBnZ2etm.png",l="/assets/passed_by_reference-wiGFrTc5.png",u="/assets/object_prototype-6iL-sZdr.png",r="/assets/dom-CR8U0q0D.png",d="/assets/js_promise_resolve_reject-D6aAn7uj.png",k="/assets/js_promise_then_catch-Cx1H9YvD.png",v={};function h(m,n){return p(),a("div",null,n[0]||(n[0]=[t('<h1 id="cau-hoi-phong-van-javascript" tabindex="-1"><a class="header-anchor" href="#cau-hoi-phong-van-javascript"><span>Câu hỏi phỏng vấn JavaScript</span></a></h1><p><img src="'+e+`" alt=""></p><p>Được phát triển bởi Brendan Eich vào năm 1995, JavaScript là một trong những ngôn ngữ lập trình phổ biến nhất với các web developer.</p><p>Nó được tạo ra cho phát triển các trang web động. Một chương trình JS được gọi là script, nó có thể được đính kèm vời bất kỳ trang web HTML nào. Các script sẽ tự động chạy khi trang được tải.</p><p>Ở hiện tại JavaScript cũng có thể chạy được trên cả server hay bất kỳ thiết bị nào có JavaScript Engine.</p><p>Dưới đây là các câu hỏi phỏng vấn JavaScript thường gặp.</p><h2 id="cau-hoi-danh-cho-fresher" tabindex="-1"><a class="header-anchor" href="#cau-hoi-danh-cho-fresher"><span>Câu hỏi dành cho Fresher</span></a></h2><h3 id="_1-su-khac-biet-giua-cac-kieu-du-lieu-trong-javascript" tabindex="-1"><a class="header-anchor" href="#_1-su-khac-biet-giua-cac-kieu-du-lieu-trong-javascript"><span>1. Sự khác biệt giữa các kiểu dữ liệu trong JavaScript?</span></a></h3><p>Trong JavaScript các kiểu dữ liệu được chia làm hai loại là kiểu nguyên thuỷ và đối tượng. Để biết kiểu dữ liệu của các biến JavaScript, ta có thể sử dụng <strong>typeof</strong>.</p><p><strong>Kiểu nguyên thuỷ</strong></p><p><strong><em>String</em></strong> - biểu diễn một mảng ký tự hay một chuỗi. Kiểu chuỗi trong javascript có thể sử dụng một cặp dấu ngoặc kép hoặc dấu ngoặc kép đơn.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;Vivek Singh Bisht&quot;</span><span class="token punctuation">;</span> <span class="token comment">//sử dụng dấu ngoặc kép</span></span>
<span class="line"><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">;</span> <span class="token comment">// sử dụng dấu ngoặc đơn</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>Number</em></strong> - biểu diễn cả số nguyên và số thực.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// số nguyên</span></span>
<span class="line"><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">3.6</span><span class="token punctuation">;</span> <span class="token comment">// số thực</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>BigInt</em></strong> - kiểu dữ liệu này được sử dụng để lưu trữ các số vượt quá giới hạn của kiểu dữ liệu Number. Nó có thể lưu trữ các số nguyên lớn và được biểu diễn bằng cách thêm “n” vào một chữ số nguyên.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> bigInteger <span class="token operator">=</span> <span class="token number">234567890123456789012345678901234567890</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong><em>Boolean</em></strong> - kiểu luận lý, có hai giá trị là <em>true</em> và <em>false</em>. Thường được dùng với điều kiện.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token comment">// trả về false</span></span>
<span class="line">  a <span class="token operator">==</span> c</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// trả về true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>undefined</em></strong> - khi giá trị của một biến là không xác định.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> x<span class="token punctuation">;</span> <span class="token comment">// giá trị của x là undefined</span></span>
<span class="line"><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// ta cũng có thể gán một biến là undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>null</em></strong> - biểu diễn giá trị null. Vì JavaScript là case-sensitive, null sẽ không giống với<code> Null</code>, <code>NULL</code>, hoặc bất kỳ biến thể khác.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong><em>Symbol</em></strong> - mới được giới thiệu trong ES6. Nó lưu trữ các giá trị duy nhất và ẩn danh.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> symbol1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;symbol&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Sử dụng <code>typeof</code> để tìm kiểu nguyên thuỷ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">typeof</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Returns &quot;string&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">// Returns &quot;number&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// Returns &quot;boolean&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token number">234567890123456789012345678901234567890n</span><span class="token punctuation">;</span> <span class="token comment">// Returns bigint</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// Returns &quot;undefined&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// Returns &quot;object&quot; (đặc trưng của JavaScript)</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;symbol&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns Symbol</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong JavaScript nếu dữ liệu không phải là kiểu nguyên thuỷ thì tất cả đều là object.</p><p><strong>Object</strong> dùng để lưu trữ tập hợp dữ liệu</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Tập hợp dữ liệu dạng key-value</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">43</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">z</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Tập hợp dữ liệu dạng danh sách</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">4.1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-giai-thich-ve-hoisting-trong-javascript" tabindex="-1"><a class="header-anchor" href="#_2-giai-thich-ve-hoisting-trong-javascript"><span>2. Giải thích về Hoisting trong Javascript?</span></a></h3><p>Hoisting là một hành vi mặc định trong Javascript, nó sẽ chuyển tất cả khai báo biến và hàm lên trên cùng.</p><p><img src="`+c+`" alt="hoisting"></p><p>Điều này có nghĩa là bất kể hàm và biến được khai báo ở đâu, chúng cũng sẽ đuọc chuyển lên đầu scope. Scope có thể là toàn cục hoặc cục bộ.</p><p>Ví dụ 1:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">hoistedVariable <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hoistedVariable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// output là 3 vì biến được khởi tạo trước khi khai báo.</span></span>
<span class="line"><span class="token keyword">var</span> hoistedVariable<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ví dụ 2:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">hoistedFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Outputs &quot; Hello world! &quot; kể cả khi hàm được khai báo sau khi gọi.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">hoistedFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot; Hello world! &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ví dụ 3:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Hoisting takes place in the local scope as well</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  x <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> x<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Lưu ý</em>: Khai báo biến được hoisting chứ phép gán biến thì không.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> x<span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output sẽ trả về &quot;undefined&quot; vì phép gán không được hoisting</span></span>
<span class="line">x <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Lưu ý</em>: Để tránh hoisting bạn có thể dùng &quot;use strict&quot;</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span></span>
<span class="line">x <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span> <span class="token comment">// Báo lỗi x  chưa được khai báo</span></span>
<span class="line"><span class="token keyword">var</span> x<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-su-khac-biet-giua-toan-tu-va-la-nhu-the-nao" tabindex="-1"><a class="header-anchor" href="#_3-su-khac-biet-giua-toan-tu-va-la-nhu-the-nao"><span>3. Sự khác biệt giữa toán tử &quot;==&quot; và &quot;===&quot; là như thế nào?</span></a></h3><p>Cả hai đều dùng để so sánh, nhưng &quot;==&quot; có thể dùng với bất kỳ kiểu dữ liệu nào còn &quot;===&quot; chỉ dành cho cùng kiểu.</p><p>Ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token comment">// Trả về true vì cả hai cùng giá trị</span></span>
<span class="line"></span>
<span class="line">  x <span class="token operator">===</span> y</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Trả về false vì typeof x là &quot;number&quot; còn typeof y là &quot;string</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-giai-thich-ve-ep-kieu-ngam-trong-javascript" tabindex="-1"><a class="header-anchor" href="#_4-giai-thich-ve-ep-kieu-ngam-trong-javascript"><span>4. Giải thích về ép kiểu ngầm trong JavaScript?</span></a></h3><p>Ép kiểu ngầm trong javascript là sự chuyển đổi tự động của giá trị từ kiểu dữ liệu này sang kiểu khác. Nó xảy ra khi thực hiện một biểu thức với các kiểu dữ liệu khác nhau.</p><p><strong>Ép kiểu String</strong></p><p>Ép kiểu string xảy ra khi dùng toán tử <code>+</code>. Một số cộng với một chuỗi, kiểu số sẽ bị ép thành kiểu chuỗi.</p><p>Ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">;</span></span>
<span class="line">x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token comment">// Returns &quot;33&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line">x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token comment">// Returns &quot;24Hello&quot;;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Để hiểu về hai ví dụ khi ta cộng một số vào chuỗi, thì khi JavaScript thấy biểu thức <code>x+y</code> với hai kiểu khác nhau (một số và một chuỗi), nó chuyển đổi kiểu số thành chuỗi để thực hiện hành động. Sau khi chuyển đổi, cả hai biến đều là kiểu chuỗi, thao tác <code>+</code> lúc này sẽ thành phép nối chuỗi kết quả là ra chuỗi &quot;33&quot; và &quot;24Hello&quot;.</p><p>Ngược lại, khi thực hiện phép toán <code>-</code>, thì chuỗi lại bị ép kiểu ngầm thành số. Ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">Var y <span class="token operator">=</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">;</span></span>
<span class="line">x <span class="token operator">-</span> y    <span class="token comment">//Returns 0 since the variable y (string type) is converted to a number type</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Ép kiểu Boolean</strong></p><p>Ép kiểu boolean xảy ra khi sử dụng các toán tử logic, lệnh if hay kiểm tra vòng lặp. Để hiểu về ép kiểu logic, ta cần hiểu về giá trị <em>truthy</em> và <em>falsy</em>.</p><p>Giá trị <em>truthy</em> là cái sẽ được ép kiểu thành <strong>true</strong>. Còn <em>falsy</em> sẽ được ép kiểu thành <strong>false</strong>.</p><p>Tất cả các giá trị ngoại trừ <code>0</code>, <code>0n</code>, <code>-0</code>, <code>&quot;&quot;</code>, <code>null</code>, <code>undefined</code>, và <code>NaN</code> thì đều là truthy.</p><p>Câu lệnh If:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token comment">// The code inside this block will not run since the value of x is 0(Falsy)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token comment">// The code inside this block will run since the value of y is 23 (Truthy)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Toán tử Logic:</p><p>Toán tử logic trong javascript không giống các ngôn ngữ lập trình khác, <strong>nó không trả về true hay false, mà nó trả về một toán hạng</strong>.</p><p>OR ( || ) - Nếu giá trị đầu tiên là truthy, giá trị đầu tiên sẽ được trả về, ngược lại thì nó trả về giá trị thứ hai.</p><p>AND ( &amp;&amp; ) - Nếu hai giá trị đều là truthy, giá trị thứ hai sẽ được trả về. Nếu giá trị đầu là falsy sẽ trả về giá trị đầu hoặc giá trị hai là falsy sẽ trả về giá trị hai.</p><p>Ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">220</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">x <span class="token operator">|</span> <span class="token operator">|</span> y    <span class="token comment">// Returns 220 since the first value is truthy</span></span>
<span class="line"></span>
<span class="line">x <span class="token operator">|</span> <span class="token operator">|</span> z   <span class="token comment">// Returns 220 since the first value is truthy</span></span>
<span class="line"></span>
<span class="line">x <span class="token operator">&amp;&amp;</span> y    <span class="token comment">// Returns &quot;Hello&quot; since both the values are truthy</span></span>
<span class="line"></span>
<span class="line">y <span class="token operator">&amp;&amp;</span> z   <span class="token comment">// Returns undefined since the second value is falsy</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">&amp;&amp;</span> y <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Code runs&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This block runs because x &amp;&amp; y returns &quot;Hello&quot; (Truthy)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">||</span> z <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Code runs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// This block runs because x || y returns 220(Truthy)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Ép kiểu dấu bằng</strong></p><p>Xảy ra khi thực hiện phép &quot;==&quot;. Nhớ lại thì phép <strong>&quot;==&quot; được dùng để so sánh hai giá trị khác kiểu</strong>.</p><p>Thực tế khi sử dụng &quot;==&quot; một ép kiểu ngầm đã xảy ra, chuyển đổi tất cả toán hạng về cùng kiểu và so sánh chúng.</p><p>Ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">&quot;12&quot;</span><span class="token punctuation">;</span></span>
<span class="line">a <span class="token operator">==</span> b<span class="token punctuation">;</span> <span class="token comment">// Returns true because both &#39;a&#39; and &#39;b&#39; are converted to the same type and then compared. Hence the operands are equal.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ép kiểu ngầm không xảy ra khi dùng &quot;===&quot;.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">226</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">&quot;226&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">a <span class="token operator">===</span> b<span class="token punctuation">;</span> <span class="token comment">// Returns false because coercion does not take place and the  operands are of different types. Hence they are not equal.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-javascript-la-ngon-ngu-kieu-tinh-hay-kieu-đong" tabindex="-1"><a class="header-anchor" href="#_5-javascript-la-ngon-ngu-kieu-tinh-hay-kieu-đong"><span>5. JavaScript là ngôn ngữ kiểu tĩnh hay kiểu động?</span></a></h3><p>JavaScript là ngôn ngữ kiểu động. Trong ngôn ngữ kiểu động, kiểu dữ liệu của biến được kiểm tra trong khi đang chạy chương trình ngược lại với kiểu tĩnh, nơi kiểu dữ liệu của biến được kiểm tra khi biên dịch.</p><p><img src="`+i+`" alt=""></p><p>Vì Javascript là ngôn ngữ kiểu động, nên một biến có thể giữ bất kỳ kiểu dữ liệu nào. Ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-thuoc-tinh-nan-trong-javascript-la-gi" tabindex="-1"><a class="header-anchor" href="#_6-thuoc-tinh-nan-trong-javascript-la-gi"><span>6. Thuộc tính NaN trong JavaScript là gì?</span></a></h3><p>Thuộc tính NaN biểu diễn một giá trị <strong>Not-a-Number</strong>. Nó biểu thị một giá trị không phải là số.</p><p><code>typeof</code> của NaN trả về <code>Number</code>. Muốn kiểm tra một giá trị có phải NaN không, có thể dùng hàm <code>isNaN()</code>.</p><p>Ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns true</span></span>
<span class="line"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">345</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns false</span></span>
<span class="line"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns false, since &#39;1&#39; is converted to Number type which results in 0 ( a number)</span></span>
<span class="line"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns false, since true converted to Number type results in 1 ( a number)</span></span>
<span class="line"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns false</span></span>
<span class="line"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-giai-thich-ve-phep-gan-qua-gia-tri-va-phep-gan-qua-tham-chieu" tabindex="-1"><a class="header-anchor" href="#_7-giai-thich-ve-phep-gan-qua-gia-tri-va-phep-gan-qua-tham-chieu"><span>7. Giải thích về phép gán quá giá trị và phép gán qua tham chiếu?</span></a></h3><p>Trong JavaScript, kiểu dữ liệu nguyên thuỷ được gán với giá trị, còn kiểu đối tượng được gán bằng tham chiếu.</p><p>Trước tiên, ta cần hiểu về điều gì xảy ra khi ta tạo một biến và gán giá trị cho nó.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Trong ví dụ trên, ta tạo một biến <code>x</code> và gán nó giá trị là &quot;2&quot;. Phép &quot;=&quot; chỉ định một vài không gian trong bộ nhớ, để lưu trữ giá trị là &quot;2&quot; và trả về vị trí được chỉ định trong bộ nhớ. Do đó, biến <code>x</code> ở trên trỏ đến vị trí trong bộ nhớ thay vì trỏ trực tiếp đến giá trị 2.</p><p>Phép gán thực hiện hành vi khác nhau khi làm việc với kiểu nguyên thuỷ và kiểu đối tượng.</p><p><strong>Phép gán với kiểu nguyên thuỷ</strong></p><p><img src="`+o+`" alt=""></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> z <span class="token operator">=</span> y<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Ở ví dụ này, dòng đầu phép gán giá trị cho <code>y</code> là kiểu nguyên thuỷ, sau đó ở dòng thứ hai, giá trị của <code>y</code> được gán cho <code>z</code>. Phép gán chỉ định một vùng không gian mới trong bộ nhớ và trả về địa chỉ của nó. Do đó, biến <code>z</code> không chỉ đến vị trí của biến <code>y</code> thay vào đó nó chỉ đến vùng không gian mới trong bộ nhớ.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> y <span class="token operator">=</span> #<span class="token number">8454</span><span class="token punctuation">;</span> <span class="token comment">// y pointing to address of the value 234</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> z <span class="token operator">=</span> y<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> z <span class="token operator">=</span> #<span class="token number">5411</span><span class="token punctuation">;</span> <span class="token comment">// z pointing to a completely new address of the value 234</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Changing the value of y</span></span>
<span class="line">y <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Returns 234, since z points to a new address in the memory so changes in y will not effect z</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Từ ví dụ trên, ta có thể thấy rằng các kiểu dữ liệu nguyên thủy khi được truyền cho một biến khác sẽ được truyền theo giá trị. Thay vì chỉ gán cùng một địa chỉ cho một biến khác, giá trị sẽ được gán và không gian bộ nhớ mới được tạo ra.</p><p><strong>Phép gán với kiểu đối tượng</strong></p><p><img src="`+l+`" alt=""></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Vivek&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">surname</span><span class="token operator">:</span> <span class="token string">&quot;Bisht&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong ví dụ trên, phép gán truyền trực tiếp vị trí của biến <code>obj</code> đến biến <code>obj2</code>. Nói cách khác, tham chiếu của biến <code>obj</code> được chuyển cho biến <code>obj2</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> obj <span class="token operator">=</span> #<span class="token number">8711</span><span class="token punctuation">;</span>  <span class="token comment">// obj pointing to address of { name: &quot;Vivek&quot;, surname: &quot;Bisht&quot; }</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> obj2 <span class="token operator">=</span> #<span class="token number">8711</span><span class="token punctuation">;</span> <span class="token comment">// obj2 pointing to the same address</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// changing the value of obj1</span></span>
<span class="line"></span>
<span class="line">obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Akki&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Returns {name:&quot;Akki&quot;, surname:&quot;Bisht&quot;} since both the variables are pointing to the same address.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Từ ví dụ trên, ta có thể thấy rằng trong khi truyền các kiểu dữ liệu đối tượng, phép gán trực tiếp truyền địa chỉ (tham chiếu).</p><p>Do đó, các kiểu dữ liệu đối tượng luôn được truyền bằng tham chiếu.</p><h3 id="_8-iife-la-gi-trong-javascript" tabindex="-1"><a class="header-anchor" href="#_8-iife-la-gi-trong-javascript"><span>8. IIFE là gì trong JavaScript?</span></a></h3><p>Immediately Invoked Function (IIFE) là một hàm được chạy ngay sau khi nó được định nghĩa.</p><p>Cú pháp của IIFE:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Do something;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Để hiểu về IIFE, trước hết cần hiểu về hai dấu ngoặc đơn được thêm vào để tạo IIFE.</p><p>Dấu ngoặc đơn đầu tiên:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//Do something;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Khi thực thi code javascript, bất cứ khi nào trình biên dịch bắt gặp từ &quot;function&quot; nó cũng sẽ cho rằng ta đang khai báo một function. Do đó, nếu ta không dùng dấu ngoặc đơn, trình biên dịch sẽ báo lỗi vì nó nghĩa ta đang khái báo một function và theo cú pháp thì các function buộc phải có tên.</p><p>Để tránh lỗi ta thêm dấu ngoặc đơn vào để trình biên dịch biết đây không phải là khai báo function mà là một biểu thức function.</p><p>Dấu ngoặc đơn thứ hai:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//Do something;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Từ định nghĩa IIFE, ta biết rằng code sẽ chạy ngay sai khi khai báo. Một function chỉ chạy khi nó được gọi. Nếu ta không gọi, thì chúng ta chỉ nhận về được khai báo hàm.</p><p>Do đó để gọi function ta sử dụng dấu ngoặc đơn thứ hai.</p><h3 id="_9-giai-thich-ve-hoc-higher-order-functions-trong-javascript" tabindex="-1"><a class="header-anchor" href="#_9-giai-thich-ve-hoc-higher-order-functions-trong-javascript"><span>9. Giải thích về HOC(Higher Order Functions) trong JavaScript?</span></a></h3><p>Các hàm hoạt động trên các hàm khác bằng cách sử dụng chúng làm tham số hoặc kết quả trả về thì được gọi là Higher Order Functions - HOC. Ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">higherOrder</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">higherOrder</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">higherOrder2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;Do something&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">higherOrder2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns &quot;Do something&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-giai-thich-ve-this" tabindex="-1"><a class="header-anchor" href="#_10-giai-thich-ve-this"><span>10. Giải thích về &quot;this&quot;?</span></a></h3><p>Từ khoá &quot;this&quot; trong javascript tham chiếu đến một đối tượng có thuộc tính là một hàm.</p><p>Giá trị của &quot;this&quot; phụ thuộc vào đối tượng đang gọi hàm.</p><p>Giả sử ta có code sau:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Như vậy theo định nghĩa, this tham chiếu đến một đối tượng có hàm là thuộc tính. Vậy trong đoạn code trên hàm là thuộc tính của đối tượng nào?</p><p>Vì hàm được gọi từ ngữ cảnh tổng thể, nên <strong>hàm sẽ là thuộc tính của đối tượng toàn cục</strong>. Do đó, nếu ta chạy đoạn code trên trình duyệt kết quả sẽ là <strong>window object</strong>.</p><p>Ví dụ 2:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;vivek&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">obj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong đoạn code này, hàm <code>getName</code> là thuộc tính của <code>obj</code>. Do đó, <strong>this</strong> sẽ tham chiếu đến đối tượng <code>obj</code>, và output sẽ là &quot;vivek&quot;.</p><p>Ví dụ 3:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;vivek&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> getName <span class="token operator">=</span> obj<span class="token punctuation">.</span>getName<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;akshay&quot;</span><span class="token punctuation">,</span> getName <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">obj2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output sẽ là &quot;akshay&quot;. Mặc dù hàm <code>getName</code> được khai báo trong đối tượng <code>obj</code>, nhưng ở thời điểm gọi thì <code>getName()</code> lại là thuộc tính của <code>obj2</code>, do đó &quot;this&quot; sẽ tham chiếu đến <code>obj2</code>.</p><p>Cách ngớ ngẩn để hiểu &quot;this&quot; là, bất cứ khi nào hàm được gọi, hãy kiểm tra đối tượng trước dấu chấm. Giá trị của this sẽ luôn là đối tượng trước dấu chấm.</p><p>Nếu không có đối tượng nào như ở ví dụ 1, giá trị sẽ là đối tượng toàn cục.</p><p>Ví dụ 4:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&quot;Mumbai,India&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">getAddress</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> getAddress <span class="token operator">=</span> obj1<span class="token punctuation">.</span>getAddress<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;akshay&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">obj2<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kết quả sẽ là lỗi, vì từ khóa this tham chiếu đến đối tượng <code>obj2</code>, nhưng <code>obj2</code> không có thuộc tính “address” ‘, do đó hàm <code>getAddress</code> sẽ xảy ra lỗi.</p><h3 id="_11-giai-thich-ve-phuong-thuc-call-aplly-va-bind" tabindex="-1"><a class="header-anchor" href="#_11-giai-thich-ve-phuong-thuc-call-aplly-va-bind"><span>11. Giải thích về phương thức call(), aplly() và bind()?</span></a></h3><h4 id="call" tabindex="-1"><a class="header-anchor" href="#call"><span>call()</span></a></h4><p>Đó là một phương thức được xác định trước trong javascript.</p><p>Phương thức này gọi một phương thức (hàm) bằng cách chỉ định đối tượng sở hữu.</p><p>Ví dụ 1:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&quot;Hello &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Sandy&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sayHello</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Returns &quot;Hello Sandy&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Phương thức call() cho phép một đối tượng sử dụng phương thức của đối tượng khác</p><p>Ví dụ 2:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">getAge</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">54</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Returns 54</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>call() chấp nhận tham số:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">saySomething</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; is &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> person4 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">saySomething</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person4<span class="token punctuation">,</span> <span class="token string">&quot;awesome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Returns &quot;John is awesome&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="apply" tabindex="-1"><a class="header-anchor" href="#apply"><span>apply()</span></a></h4><p>Tương tự như phương thức call(). Nhưng khác ở điểm <strong>phương thức call() nhận các tham số riêng biệt, trong khi apply() nhận tham số là một mảng</strong>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">saySomething</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; is &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> person4 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">saySomething</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>person4<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;awesome&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bind" tabindex="-1"><a class="header-anchor" href="#bind"><span>bind()</span></a></h4><p>Phương thức này trả về một hàm mới, trong đó giá trị của &quot;this&quot; sẽ được liên kết với đối tượng sở hữu, được cung cấp dưới dạng một tham số.</p><p>Ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> bikeDetails <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">displayDetails</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">registrationNumber<span class="token punctuation">,</span> brandName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span></span>
<span class="line">      <span class="token string">&quot; , &quot;</span> <span class="token operator">+</span></span>
<span class="line">      <span class="token string">&quot;bike details: &quot;</span> <span class="token operator">+</span></span>
<span class="line">      registrationNumber <span class="token operator">+</span></span>
<span class="line">      <span class="token string">&quot; , &quot;</span> <span class="token operator">+</span></span>
<span class="line">      brandName</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Vivek&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> detailsOfPerson1 <span class="token operator">=</span> bikeDetails<span class="token punctuation">.</span><span class="token function">displayDetails</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span></span>
<span class="line">  person1<span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;TS0122&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;Bullet&quot;</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Binds the displayDetails function to the person1 object</span></span>
<span class="line"></span>
<span class="line"><span class="token function">detailsOfPerson1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Returns Vivek, bike details: TS0452, Thunderbird</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-currying-trong-javascript-la-gi" tabindex="-1"><a class="header-anchor" href="#_12-currying-trong-javascript-la-gi"><span>12. Currying trong JavaScript là gì?</span></a></h3><p>Currying là một kỹ thuật nâng cao để biến đổi một hàm với n tham số, thành n hàm với một tham số duy nhất.</p><p>Ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong ví dụ trên, ta có hàm <code>f(a,b)</code> sau khi currying ta đã biến đổi nó thành <code>f(a)(b)</code>.</p><p>Bằng cách sử dụng kỹ thuật currying, chúng ta không thay đổi chức năng của một hàm, mà chỉ thay đổi cách nó được gọi.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">currying</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> curriedMultiply <span class="token operator">=</span> <span class="token function">currying</span><span class="token punctuation">(</span>multiply<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns 12</span></span>
<span class="line"></span>
<span class="line"><span class="token function">curriedMultiply</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Also returns 12</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Như ta có thể thấy trong đoạn code trên, chúng ta đã chuyển đổi hàm <code>multiply(a, b)</code> thành một hàm <code>curriedMultiply</code>, nhận một tham số tại một thời điểm.</p><h3 id="_13-giai-thich-ve-scope-va-scope-chain" tabindex="-1"><a class="header-anchor" href="#_13-giai-thich-ve-scope-va-scope-chain"><span>13. Giải thích về Scope và Scope Chain?</span></a></h3><p>Scope trong JS, xác định khả năng truy cập của các biến, hàm ở các phần khác nhau trong một đoạn code.</p><p>Nói chung, Scope cho biết phạm vi mà biến và hàm của ta có thể hay không thể truy cập. Có 3 loại scope trong JS:</p><ul><li>Global Scope</li><li>Local hay Function Scope</li><li>Block Scope</li></ul><h4 id="global-scope" tabindex="-1"><a class="header-anchor" href="#global-scope"><span>Global Scope</span></a></h4><p>Các biến hoặc hàm được khai báo trong namespace global đều có global scope, có nghĩa là tất cả các biến và hàm có global scope có thể được truy cập từ bất kỳ đâu bên trong code.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> globalVariable <span class="token operator">=</span> <span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> globalVariable<span class="token punctuation">;</span> <span class="token comment">// can access globalVariable since it&#39;s written in global space</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sendMessage2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Can access sendMessage function since it&#39;s written in global space</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sendMessage2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns “Hello world”</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="function-scope" tabindex="-1"><a class="header-anchor" href="#function-scope"><span>Function Scope</span></a></h4><p>Bất kỳ biến hoặc hàm nào được khai báo bên trong một hàm đều có function scope, có nghĩa là tất cả các biến và hàm được khai báo bên trong một hàm, có thể được truy cập từ bất cứ đâu bên trong hàm chứ không phải bên ngoài nó.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">awesomeFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">var</span> <span class="token function-variable function">multiplyBy2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Can access variable &quot;a&quot; since a and multiplyBy2 both are written inside the same function</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Throws reference error since a is written in local scope and cannot be accessed outside</span></span>
<span class="line"></span>
<span class="line"><span class="token function">multiplyBy2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Throws reference error since multiplyBy2 is written in local scope</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="block-scope" tabindex="-1"><a class="header-anchor" href="#block-scope"><span>Block Scope</span></a></h4><p>Block Scope liên quan đến các biến được khai báo bằng let và const. Các biến được khai báo với var không có block scope.</p><p>Block scope cho chúng ta biết rằng bất kỳ biến nào được khai báo bên trong một khối <code>{}</code>, chỉ có thể được truy cập bên trong khối đó và không thể được truy cập bên ngoài khối đó.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Gives reference error since x cannot be accessed outside of the block</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Gives reference error since i cannot be accessed outside of the for loop block</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="scope-chain" tabindex="-1"><a class="header-anchor" href="#scope-chain"><span>Scope Chain</span></a></h4><p>JavaScript Engine cũng sử dụng scope để tìm biến. Ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">favFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">667</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> <span class="token function-variable function">anotherFavFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Does not find x inside anotherFavFunction, so looks for variable inside favFunction, outputs 667</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">var</span> <span class="token function-variable function">yetAnotherFavFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Does not find y inside yetAnotherFavFunction, so looks for variable inside favFunction and does not find it, so looks for variable in global scope, finds it and outputs 24</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">anotherFavFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">yetAnotherFavFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">favFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Như bạn có thể thấy trong đoạn code trên, nếu javascript engine không tìm thấy biến trong function scope, nó sẽ cố gắng kiểm tra biến ở phạm vi bên ngoài. Nếu biến không tồn tại trong phạm vi bên ngoài, nó sẽ cố gắng tìm biến trong global scope.</p><p>Nếu biến cũng không được tìm thấy trong không gian chung, thì lỗi tham chiếu sẽ được đưa ra.</p><h3 id="_14-giai-thich-ve-closures-trong-javascript" tabindex="-1"><a class="header-anchor" href="#_14-giai-thich-ve-closures-trong-javascript"><span>14. Giải thích về Closures trong JavaScript?</span></a></h3><p>Closures là khả năng của một hàm ghi nhớ các biến và hàm được khai báo bên ngoài phạm vi của nó.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> <span class="token function-variable function">Person</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">pName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> name <span class="token operator">=</span> pName<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Neelesh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Hiểu closure qua ví dụ sau:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">randomFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Vivian&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">45</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; is &quot;</span> <span class="token operator">+</span> <span class="token string">&quot;awesome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Has access to obj1 even when the randomFunc function is executed</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> initialiseClosure <span class="token operator">=</span> <span class="token function">randomFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns a function</span></span>
<span class="line"></span>
<span class="line"><span class="token function">initialiseClosure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong đoạn code trên:</p><p>Hàm <code>randomFunc()</code> được thực thi và trả về một hàm khi ta thực hiện phép gán:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> initialiseClosure <span class="token operator">=</span> <span class="token function">randomFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Hàm được trả về được thực thi khi ta gọi <code>initialiseClosure</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">initialiseClosure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Kết quả sẽ là &quot;Vivian is awesome&quot; điều này xảy ra là do closure.</p><p>Khi hàm <code>randomFunc()</code> chạy, nó sẽ thấy rằng hàm trả về đang sử dụng biến <code>obj1</code> bên trong nó:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; is &quot;</span> <span class="token operator">+</span> <span class="token string">&quot;awesome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Do đó, <code>randomFunc()</code>, thay vì hủy giá trị của <code>obj1</code> sau khi thực thi, sẽ lưu giá trị lại vào trong bộ nhớ để tham khảo thêm. Đây là lý do tại sao hàm trả về có thể sử dụng biến được khai báo bên ngoài phạm vi ngay cả sau khi hàm đã được thực thi.</p><p><strong>Khả năng này của một hàm nhằm lưu trữ một biến để tham khảo thêm ngay cả sau khi nó được thực thi, được gọi là Closure.</strong></p><h3 id="_15-prototype-la-gi" tabindex="-1"><a class="header-anchor" href="#_15-prototype-la-gi"><span>15. Prototype là gì?</span></a></h3><p>Tất cả các đối tượng javascript đều kế thừa các thuộc tính từ một <strong>prototype</strong>.</p><p>Ví dụ:</p><p>Đối tượng Date kế thừa các thuộc tính từ prototype Date.</p><p>Đối tượng Math kế thừa các thuộc tính từ prototype Math.</p><p>Đối tượng Array kế thừa các thuộc tính từ prototype Array.</p><p>Trên đầu chuỗi là <code>Object.prototype</code>. Mọi prototype đều kế thừa các thuộc tính và phương thức từ <code>Object.prototype</code>.</p><p>Prototype là một bản thiết kế của một đối tượng. Prototype cho phép chúng ta sử dụng các thuộc tính và phương thức trên một đối tượng ngay cả khi các thuộc tính và phương thức không tồn tại trên đối tượng hiện tại.</p><p><img src="`+u+`" alt=""></p><p>Ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs [2]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong đoạn code trên, có thể thấy ta chưa xác định bất kỳ thuộc tính hoặc phương thức nào được gọi là push trên mảng <code>arr</code> nhưng javascript engine không đưa ra lỗi.</p><p>Lý do là việc sử dụng các prototype. Như đã thảo luận trước đây, các đối tượng Array kế thừa các thuộc tính từ prototype Array.</p><p>Javascript engine thấy rằng phương thức <code>push</code> không tồn tại trên đối tượng mảng hiện tại, do đó nó tìm kiếm phương thức push bên trong prototype Array và nó tìm thấy phương thức.</p><p>Bất cứ khi nào thuộc tính hoặc phương thức không được tìm thấy trên đối tượng hiện tại, javascript engine sẽ luôn tìm kiếm trong prototype của nó và nếu nó vẫn không tồn tại, nó sẽ tìm bên trong prototype của prototype, v.v.</p><h3 id="_16-callback-la-gi" tabindex="-1"><a class="header-anchor" href="#_16-callback-la-gi"><span>16. Callback là gì?</span></a></h3><p>Callback là một hàm sẽ được thực thi sau khi một hàm khác được thực thi.</p><p>Trong javascript, các hàm được coi như là <strong>first-class citizens</strong>, chúng có thể được sử dụng như một tham số của một hàm khác, có thể được trả về bởi một hàm khác và có thể được sử dụng như một thuộc tính của một đối tượng.</p><p>Các hàm được sử dụng làm tham số cho một hàm khác được gọi là hàm callback.</p><p>Ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">divideByHalf</span><span class="token punctuation">(</span><span class="token parameter">sum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>sum <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">multiplyBy2</span><span class="token punctuation">(</span><span class="token parameter">sum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">operationOnSum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> operation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> sum <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">operation</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">operationOnSum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> divideByHalf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs 3</span></span>
<span class="line"></span>
<span class="line"><span class="token function">operationOnSum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> multiplyBy2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs 20</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong đoạn code trên, ta đang thực hiện các phép toán cộng hai số.</p><p>Hàm <code>operationOnSum</code> nhận 3 tham số, <code>num1</code>, <code>num2</code> và <code>operator</code> sẽ được thực hiện trên tổng của chúng (callback).</p><p>Cả hai hàm <code>splitByHalf</code> và <code>MultiBy2</code> đều được sử dụng làm hàm callback trong đoạn code trên.</p><p>Các hàm callback này chỉ được thực thi sau khi thực thi hàm <code>operationOnSum</code>.</p><p>Do đó, callback là một hàm sẽ được thực thi sau khi một hàm khác được thực thi.</p><h3 id="_17-memoization-la-gi" tabindex="-1"><a class="header-anchor" href="#_17-memoization-la-gi"><span>17. Memoization là gì?</span></a></h3><p>Memoization là một dạng bộ nhớ đệm trong đó giá trị trả về của một hàm được lưu vào bộ đệm dựa trên các tham số của nó. Nếu tham số của hàm đó không được thay đổi, phiên bản được lưu trong bộ nhớ cache của hàm sẽ được trả về.</p><p>Chúng ta có thể hiểu memoization, bằng cách chuyển đổi một hàm đơn giản thành một hàm được ghi nhớ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">addTo256</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">256</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">addTo256</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns 276</span></span>
<span class="line"><span class="token function">addTo256</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns 296</span></span>
<span class="line"><span class="token function">addTo256</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns 276</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong đoạn code trên, chúng ta đã viết một hàm thêm tham số vào 256 và trả về nó.</p><p>Khi gọi lại hàm <code>addTo256</code> với cùng một tham số (“20” trong trường hợp trên), ta đang tính toán lại kết quả cho cùng một tham số.</p><p>Tính toán kết quả với cùng một tham số không phải là vấn đề lớn trong trường hợp trên, nhưng hãy tưởng tượng nếu hàm thực hiện một số công việc nặng nhọc, thì việc tính toán kết quả lặp đi lặp lại với cùng một tham số sẽ dẫn đến lãng phí thời gian.</p><p>Đây là lúc memoization xuất hiện, bằng cách sử dụng memoization, chúng ta có thể lưu trữ (bộ nhớ đệm) các kết quả được tính toán dựa trên các tham số. Nếu cùng một tham số được sử dụng lại trong khi gọi hàm, thay vì tính toán kết quả, chúng tôi trực tiếp trả về giá trị đã lưu trữ (đã lưu trong bộ nhớ cache).</p><p>Hãy chuyển đổi hàm <code>addTo256</code> ở trên, thành một hàm được ghi nhớ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">memoizedAddTo256</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token keyword">in</span> cache<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;cached value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> cache<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      cache<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">256</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> cache<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> memoizedFunc <span class="token operator">=</span> <span class="token function">memoizedAddTo256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">memoizedFunc</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Normal return</span></span>
<span class="line"><span class="token function">memoizedFunc</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Cached return</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong đoạn code trên, nếu ta chạy hàm <code>memoizedFunc</code> với cùng một tham số, thay vì tính toán lại kết quả, nó sẽ trả về kết quả được lưu trong bộ nhớ cache.</p><p><em>Lưu ý</em> Mặc dù sử dụng memoization tiết kiệm thời gian, nhưng nó dẫn đến tiêu thụ bộ nhớ lớn hơn vì ta đang lưu trữ tất cả các kết quả được tính toán.</p><h3 id="_18-đe-quy-la-gi" tabindex="-1"><a class="header-anchor" href="#_18-đe-quy-la-gi"><span>18. Đệ quy là gì?</span></a></h3><p>Đệ quy là một kỹ thuật lặp đi lặp lại một hoạt động bằng cách tự gọi hàm lặp đi lặp lại cho đến khi nó đi đến kết quả.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> number <span class="token operator">+</span> <span class="token function">add</span><span class="token punctuation">(</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">3</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">6</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ví dụ về một hàm đệ quy:</p><p>Hàm sau đây tính tổng của tất cả các phần tử trong một mảng bằng cách sử dụng đệ quy:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">computeSum</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">computeSum</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">computeSum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns 123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_19-ham-khoi-tao-trong-javascript" tabindex="-1"><a class="header-anchor" href="#_19-ham-khoi-tao-trong-javascript"><span>19. Hàm khởi tạo trong JavaScript</span></a></h3><p>Các hàm khởi tạo được sử dụng để tạo các đối tượng trong javascript.</p><p>Khi nào chúng ta sử dụng các hàm khởi tạo?</p><p>Nếu chúng ta muốn tạo nhiều đối tượng có các thuộc tính và phương thức giống nhau, các hàm khởi tạo được sử dụng.</p><p><em>Lưu ý</em> - Tên của một hàm khởi tạo phải luôn được viết bằng Ký hiệu Pascal: mọi từ phải bắt đầu bằng một chữ cái viết hoa.</p><p>Ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Vivek&quot;</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Courtney&quot;</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token string">&quot;female&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong đoạn code trên, ta đã tạo một hàm khởi tạo có tên là Person.</p><p>Bất cứ khi nào chúng ta muốn tạo một đối tượng mới kiểu Person,</p><p>Chúng tôi cần tạo nó bằng cách sử dụng từ khóa mới:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> person3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Lilly&quot;</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">&quot;female&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Dòng code trên sẽ tạo một đối tượng mới kiểu Person.</p><p>Các hàm khởi tạo cho phép chúng ta nhóm các đối tượng tương tự nhau.</p><h3 id="_20-dom-la-gi" tabindex="-1"><a class="header-anchor" href="#_20-dom-la-gi"><span>20. DOM là gì?</span></a></h3><p>DOM là viết tắt của Document Object Model.</p><p>DOM là interface lập trình của tài liệu XML và HTML.</p><p>Khi trình duyệt cố gắng hiển thị một tài liệu HTML, nó sẽ tạo một đối tượng dựa trên tài liệu HTML được gọi là DOM. Sử dụng DOM này, chúng ta có thể thao tác hoặc thay đổi các phần tử khác nhau bên trong tài liệu HTML.</p><p>Ví dụ về cách code HTML được chuyển đổi thành DOM:</p><p><img src="`+r+`" alt=""></p><h2 id="cau-hoi-danh-cho-experiencer" tabindex="-1"><a class="header-anchor" href="#cau-hoi-danh-cho-experiencer"><span>Câu hỏi dành cho Experiencer</span></a></h2><h3 id="_21-ham-arrow-la-gi" tabindex="-1"><a class="header-anchor" href="#_21-ham-arrow-la-gi"><span>21. Hàm arrow là gì?</span></a></h3><p>Arrow function được giới thiệu từ phiên bản ES6 của javascript.</p><p>Nó cung cấp một cú pháp mới và ngắn hơn cho khai báo hàm. Hàm arrow có thể xử dụng như là một biểu thức hàm. Ta sẽ so sánh khai báo hàm thông thường với hàm arrow.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Traditional Function Expression</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Arrow Function Expression</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">arrowAdd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Hàm arrow khai báo mà không cần từ khoá <code>function</code>. Nếu nó chỉ trả về một biểu thức hàm thì ta không cần sử dụng từ khoá <code>return</code> như trong ví dụ trên. Ngoài ra, đối với các hàm chỉ có một dòng, có thể bỏ qua dấu ngoặc nhọn <code>{}</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Traditional function expression</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">multiplyBy2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Arrow function expression</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">arrowMultiplyBy2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nếu hàm chỉ nhận một tham số, ta có thể bỏ dấu ngoặc đơn xung quanh nó như ví dụ trên.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">valueOfThis</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">valueOfThis</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">obj1<span class="token punctuation">.</span><span class="token function">valueOfThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Will return the object obj1</span></span>
<span class="line">obj2<span class="token punctuation">.</span><span class="token function">valueOfThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Will return window/global object</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sự khác biệt lớn nhất giữa nhất giữa hàm truyền thống với arrow, là ở từ khoá <strong>this</strong>.</p><p>Như định nghĩa, từ khoá this tham chiếu đến đối tượng chứa hàm được gọi.</p><p>Như bạn có thể thấy, <code>obj1.valueOfThis()</code> trả về <code>obj1</code>, vì từ khoá <code>this</code> tham chiếu đến đối tượng chứa hàm đang gọi.</p><p>Còn ở hàm arrow, không có ràng buộc nào của từ khóa this.</p><p>Từ khoá this trong hàm arrow, không tham chiếu đến đối tượng đang gọi nó. Nó kế thừa giá trị của nó từ phạm vi cha là <code>window object</code> trong trường hợp này.</p><p>Do đó, trong đoạn code trên, <code>obj2.valueOfThis()</code> trả về window object.</p><h3 id="_22-su-khac-biet-cua-bien-dung-var-let-va-const" tabindex="-1"><a class="header-anchor" href="#_22-su-khac-biet-cua-bien-dung-var-let-va-const"><span>22. Sự khác biết của biến dùng var, let và const</span></a></h3><p>Từ phiên bản ES6, từ khoá let và const được thêm vào cho khai báo biến.</p><table><thead><tr><th>keyword</th><th>const</th><th>let</th><th>var</th></tr></thead><tbody><tr><td>global scope</td><td>no</td><td>no</td><td>yes</td></tr><tr><td>function scope</td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>block scope</td><td>yes</td><td>yes</td><td>no</td></tr><tr><td>can be reassigned</td><td>no</td><td>yes</td><td>yes</td></tr></tbody></table><p>Ta thử xem các ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> variable1 <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> variable2 <span class="token operator">=</span> <span class="token number">89</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">catchValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Both the variables can be accessed anywhere since they are declared in the global scope</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">window<span class="token punctuation">.</span>variable1<span class="token punctuation">;</span> <span class="token comment">// Returns the value 23</span></span>
<span class="line"></span>
<span class="line">window<span class="token punctuation">.</span>variable2<span class="token punctuation">;</span> <span class="token comment">// Returns undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Các biến được khai báo với từ khóa <code>let</code> trong global scope sẽ hoạt động giống như biến được khai báo với từ khóa <code>var</code> trong global scope.</p><p>Các biến được khai báo trong global scope với từ khóa var và let có thể được truy cập từ bất kỳ đâu trong code.</p><p>Nhưng, có một sự khác biệt!</p><p>Các biến được khai báo với từ khóa var trong global scope được thêm vào đối tượng window/global. Do đó, chúng có thể được truy cập bằng <code>window.variableName</code>.</p><p>Trong khi đó, các biến được khai báo với từ khóa let không được thêm vào đối tượng toàn cục, do đó, việc cố gắng truy cập các biến đó bằng cách sử dụng <code>window.variableName</code> sẽ dẫn đến lỗi.</p><p><strong>var và let ở function scope</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">varVsLetFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> awesomeCar1 <span class="token operator">=</span> <span class="token string">&quot;Audi&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> awesomeCar2 <span class="token operator">=</span> <span class="token string">&quot;Mercedes&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>awesomeCar1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Throws an error</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>awesomeCar2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Throws an error</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Các biến được khai báo trong function scope bằng cách sử dụng <code>var</code> và <code>let</code> hoạt động hoàn toàn giống nhau, nghĩa là chúng không thể được truy cập từ bên ngoài phạm vi.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> variable3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs [1,2,3,4]</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> variable4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Throws error</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//Do something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Throws error</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Do something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong javascript, một khối có nghĩa là code được viết bên trong dấu ngoặc nhọn <code>{}</code>.</p><p>Các biến được khai báo với từ khóa var không có block scope. Nó có nghĩa là một biến được khai báo trong block scope <code>{}</code> với từ khóa var cũng giống như khai báo biến trong global scope.</p><p>Các biến được khai báo với từ khóa let bên trong block scope không thể được truy cập từ bên ngoài khối.</p><h4 id="const" tabindex="-1"><a class="header-anchor" href="#const"><span>const</span></a></h4><p>Các biến với từ khóa const hoạt động chính xác như một biến được khai báo với từ khóa let chỉ có một điểm khác biệt, bất kỳ biến nào được khai báo với từ khóa const đều là hằng số, tức là không thể được gán lại.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Vivek&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">x <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&quot;India&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Throws an error</span></span>
<span class="line"></span>
<span class="line">x<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Nikhil&quot;</span><span class="token punctuation">;</span> <span class="token comment">// No error is thrown</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">y <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span> <span class="token comment">// Throws an error</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong đoạn code trên, mặc dù chúng ta có thể thay đổi giá trị của một thuộc tính bên trong biến được khai báo với từ khóa const, nhưng chúng ta không thể gán lại hoàn toàn chính biến đó.</p><h3 id="_23-tham-so-con-lai-va-toan-tu-spread-la-gi" tabindex="-1"><a class="header-anchor" href="#_23-tham-so-con-lai-va-toan-tu-spread-la-gi"><span>23. Tham số còn lại và toán tử spread là gì?</span></a></h3><p>Cả hai đều được giới thiệu ở phiên bản ES6</p><h4 id="tham-so-con-lai" tabindex="-1"><a class="header-anchor" href="#tham-so-con-lai"><span>Tham số còn lại (...)</span></a></h4><p>Nó cung cấp một cách cải tiến để xử lý các tham số của một hàm.</p><p>Sử dụng cú pháp <em>tham số còn lại</em>, chúng ta có thể tạo ra hàm có thể nhận một số đối số thay đổi.</p><p>Bất kỳ số lượng đối số nào sẽ được chuyển đổi thành một mảng bằng cách sử dụng <em>tham số còn lại</em>.</p><p>Nó cũng giúp giải nén tất cả hoặc một số phần của các tham số.</p><p><em>Tham số còn lại</em> có thể được sử dụng bằng cách áp dụng ba dấu chấm (...) trước các tham số.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">extractingArgs</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// extractingArgs(8,9,1); // Returns 9</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">addAllArgs</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> sumOfArgs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    sumOfArgs <span class="token operator">+=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> sumOfArgs<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">addAllArgs</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns 117</span></span>
<span class="line"><span class="token function">addAllArgs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns 8</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Lưu ý</em> Tham số còn lại nên được dùng như là tham số cuối cùng của hàm</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Incorrect way to use rest parameter</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">randomFunc</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">//Do something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Correct way to use rest parameter</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">randomFunc2</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">//Do something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="toan-tu-spread" tabindex="-1"><a class="header-anchor" href="#toan-tu-spread"><span>Toán tử spread (...)</span></a></h4><p>Mặc dù cú pháp của toán tử spread hoàn toàn giống với tham số còn lại, nhưng toán tử spread được sử dụng để trải ra các phần tử của một đối tượng có thể lặp lại. Toán tử spread được sử dụng trong các câu lệnh, biểu thức hoặc khi gọi hàm.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">addFourNumbers</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3 <span class="token operator">+</span> num4<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> fourNumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">addFourNumbers</span><span class="token punctuation">(</span><span class="token operator">...</span>fourNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Spreads [5,6,7,8] as 5,6,7,8</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> clonedArray1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>array1<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Spreads the array into 3,4,5,6</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clonedArray1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs [3,4,5,6]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">&quot;Bye&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> clonedObj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1 <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Spreads and clones obj1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token string">&quot;Yes&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&quot;No&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> mergedObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1<span class="token punctuation">,</span> <span class="token operator">...</span>obj2 <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Spreads both the objects and merges it</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mergedObj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Outputs {x:&#39;Hello&#39;, y:&#39;Bye&#39;,z:&#39;Yes&#39;,a:&#39;No&#39;};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Lưu ý</em> sự khác biệt giữa tham số còn lại và toán tử spread.</p><ul><li>Tham số còn lại được dùng để nhận một lượng tham số có thể thay đổi và chuyển nó thành mảng, trong khi toán tử spread lấy một mảng/đối tượng và trải nó.</li><li>Tham số còn lại dùng cho khai báo hàm còn toán tử spread dùng cho gọi hàm</li></ul><h3 id="_24-su-dung-promise-trong-javascript" tabindex="-1"><a class="header-anchor" href="#_24-su-dung-promise-trong-javascript"><span>24 Sử dụng Promise trong JavaScript</span></a></h3><p><strong>Promise dùng cho xử lý bất đồng bộ trong JavaScript</strong></p><p>Trước promise, callback được dùng cho các thao tác bất đồng bộ. Nhưng callback có giới hạn của nó, nếu sử dụng quá nhiều callback code sẽ trở nên khó quản lý.</p><p>Đối tượng promise có 4 trạng thái:</p><ul><li><strong>Pending</strong>: trạng thái bắt đầu, biểu diễn promise không phải là fulfilled, cũng không phải là rejected mà đang ở trạng thái pending.</li><li><strong>Fulfilled</strong>: trạng thái này có nghĩa là thao tác bất đồng bộ đã hoàn tất.</li><li><strong>Rejected</strong>: trạng này này có nghĩa là thao tác đã thất bại vì một vài lý do nào đó.</li><li><strong>Settked</strong>: trạng thái này thể hiện promise đã rejected hoặc fulfilled.</li></ul><p>Một promise được tạo bằng cách sử dụng phương thức khởi tạo Promise, hàm này nhận một hàm callback với hai tham số, <code>resolve</code> và <code>reject</code> tương ứng.</p><p><img src="`+d+`" alt=""></p><ul><li><strong>resolve</strong> hàm được gọi, khi thao tác bất đồng bộ thực hiện thành công.</li><li><strong>reject</strong> hàm được gọi, khi thao tác thất bại bởi một vài lỗi nào đó.</li></ul><p>Ví dụ:</p><p>Promise được dùng cho các thao tác bất đồng bộ như yêu cầu của server, để dễ hiểu ta lấy ví dụ với một phép toán để tính tổng của ba phần tử.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">sumOfThreeElements</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>elements</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&quot;Only three elements or less are allowed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        sum <span class="token operator">+=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;Sum has been calculated: &quot;</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong đoạn code trên, ta đang tính tổng của ba phần tử, nếu độ dài của mảng phần tử lớn hơn 3, thì promise sẽ bị rejected, ngược lại thì promise sẽ được resolved và tổng được trả về.</p><p>Chúng ta có thể sử dụng bất kỳ promise nào bằng cách gắn các phương thức <code>then()</code> và <code>catch()</code> vào đối tượng sử dụng.</p><p><img src="`+k+`" alt=""></p><ul><li><strong>then()</strong> phương này được truy cập khi kết quả của promise là <em>fulfilled</em>.</li><li><strong>catch()</strong> phương này được truy cập khi kết quả của promise là <em>rejected</em>.</li></ul><p>Ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">sumOfThreeElements</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// In the code above, the promise is fulfilled so the then() method gets executed</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sumOfThreeElements</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// In the code above, the promise is rejected hence the catch() method gets executed</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_25-lop-trong-javascript" tabindex="-1"><a class="header-anchor" href="#_25-lop-trong-javascript"><span>25. Lớp trong JavaScript?</span></a></h3><p>Được thêm vào ở phiên bản ES6, các lớp không là gì ngoài các cú pháp tuyệt vời cho các hàm khởi tạo.</p><p>Chúng cung cấp một cách mới để khai báo các hàm khởi tạo trong javascript.</p><p>Dưới đây là các ví dụ về cách các lớp được khai báo và sử dụng:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Before ES6 version, using constructor functions</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> rollNumber<span class="token punctuation">,</span> grade<span class="token punctuation">,</span> section</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>rollNumber <span class="token operator">=</span> rollNumber<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>section <span class="token operator">=</span> section<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Way to add methods to a constructor function</span></span>
<span class="line"><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getDetails</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&quot;Name: \${this.name}, Roll no: \${this.rollNumber}, Grade: \${this.grade}, Section:\${this.section}&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> student1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;Vivek&quot;</span><span class="token punctuation">,</span> <span class="token number">354</span><span class="token punctuation">,</span> <span class="token string">&quot;6th&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">student1<span class="token punctuation">.</span><span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Returns Name: Vivek, Roll no:354, Grade: 6th, Section:A</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ES6 version classes</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> rollNumber<span class="token punctuation">,</span> grade<span class="token punctuation">,</span> section</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>rollNumber <span class="token operator">=</span> rollNumber<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>section <span class="token operator">=</span> section<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Methods can be directly added inside the class</span></span>
<span class="line">  <span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;Name: \${this.name}, Roll no: \${this.rollNumber}, Grade:\${this.grade}, Section:\${this.section}&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;Garry&quot;</span><span class="token punctuation">,</span> <span class="token number">673</span><span class="token punctuation">,</span> <span class="token string">&quot;7th&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">student2<span class="token punctuation">.</span><span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Returns Name: Garry, Roll no:673, Grade: 7th, Section:C</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Các điều cần nhớ về lớp:</p><ul><li>Không như function, các lớp không được hoisting. Chúng cần khai báo trước khi sử dụng.</li><li>Một lớp có thể kế thừa thuộc tính và phương thức từ lớp khác bằng từ khoá <code>extends</code>.</li><li>Tất cả cú pháp trong lớp phải theo tuần thủ chế độ strict (<code>use strict</code>). Lỗi sẽ xuất hiện nếu các quy tắc trong chế độ strict không được tuân thủ.</li></ul><h3 id="_26-ham-generator-la-gi" tabindex="-1"><a class="header-anchor" href="#_26-ham-generator-la-gi"><span>26. Hàm generator là gì?</span></a></h3><p>Được giới thiệu ở phiên bản ES6, generator function là một lớp đặc biệt của hàm.</p><p><strong>Chúng có thể được dừng lại giữa chừng và sau đó tiếp tục từ nơi nó đã dừng lại.</strong></p><p>Hàm generator được khai báo với từ khoá <strong>function *</strong>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">genFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Perform operation</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong các hàm thông thường, ta sử dụng <code>return</code> để trả về giá trị, và ngay sau khi khi lệnh <code>return</code> được thực thi, việc thực thi hàm sẽ dừng lại.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">normalFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">22</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This line of code does not get executed</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Còn với các hàm generator, khi được gọi nó sẽ không thực thi code thay vào đó nó trả về một đối tượng <strong>generator</strong>. Đối tượng generator này xử lý việc thực thi:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">genFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">yield</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">genFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns Object [Generator] {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Đối tượng generator bao gồm một phương thức được gọi là <code>next()</code>, phương thức này khi được gọi sẽ thực thi code cho đến câu lệnh <code>yield</code> gần nhất và trả về giá trị <code>yield</code>.</p><p>Ví dụ: nếu ta chạy phương thức <code>next()</code> trên đoạn code trên:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">genFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns {value: 3, done:false}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Như ta có thể thấy phương thức <code>next()</code> trả về một đối tượng bao gồm thuộc tính <code>value</code> và <code>done</code>.</p><ul><li>Thuộc tính value đại diện cho giá trị thu được.</li><li>Thuộc tính done cho ta biết code của hàm đã hoàn thành hay chưa. (Trả về true nếu kết thúc).</li></ul><p>Các hàm generator được sử dụng để trả về các vòng lặp. Hãy xem một ví dụ trong đó một vòng lặp được trả về:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">iteratorFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">yield</span> i<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> count<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">iteratorFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {value:0,done:false}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {value:1,done:false}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {value:2,done:true}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Như bạn có thể thấy trong đoạn code trên, dòng cuối cùng trả về <code>done: true</code>, vì code này đạt đến cuối hàm.</p><h3 id="_27-giai-thich-weakset-trong-javascript" tabindex="-1"><a class="header-anchor" href="#_27-giai-thich-weakset-trong-javascript"><span>27. Giải thích WeakSet trong JavaScript</span></a></h3><p>Trong Javascript, Set là tập hợp các phần tử đơn nhất và có thứ tự.</p><p>Giống như Set, WeakSet cũng là tập hợp các phần tử đơn nhất và có thứ tự. Nhưng có vài điểm khác:</p><ul><li>Weakset chỉ chứa các đối tượng và không có loại nào khác.</li><li>Một đối tượng bên trong weakset có tham chiếu yếu. Điều này có nghĩa là, nếu đối tượng bên trong weakset không có tham chiếu, nó sẽ được bộ dọn dẹp thu gom.</li><li>Không giống như Set, WeakSet chỉ có ba phương thức, add(), delete() và has().</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> newSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newSet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs Set {4,5,6,7}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> newSet2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Throws an error</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;Hello world&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> newSet3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">[</span>obj1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newSet3<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_28-giai-thich-ve-weakmap-trong-javascript" tabindex="-1"><a class="header-anchor" href="#_28-giai-thich-ve-weakmap-trong-javascript"><span>28. Giải thích về WeakMap trong JavaScript</span></a></h3><p>Trong JS, Map được dùng để lưu các cặp key-value. Các cặp key-value có thể là kiểu nguyên thuỷ hoặc đối tượng.</p><p>WeakMap gần giống Map với vài điểm khác biệt:</p><ul><li>Key và value trong weakmap phải là kiểu đối tượng.</li><li>Nếu không có tham chiếu đến đối tượng, đối tượng sẽ bị dọn dep.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> map1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">map1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;Value&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">map2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;Value&quot;</span><span class="token punctuation">,</span> <span class="token number">2.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Throws an error</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Vivek&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> map3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">map3<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_29-cau-truc-đoi-tuong-la-gi" tabindex="-1"><a class="header-anchor" href="#_29-cau-truc-đoi-tuong-la-gi"><span>29. Cấu trúc đối tượng là gì?</span></a></h3><p>Cấu trúc đối tượng là một cách mới để trích xuất các phần tử từ một đối tượng hoặc một mảng.</p><p>Trước ES6:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> classDetails <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">strength</span><span class="token operator">:</span> <span class="token number">78</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">benches</span><span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">blackBoard</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> classStrength <span class="token operator">=</span> classDetails<span class="token punctuation">.</span>strength<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> classBenches <span class="token operator">=</span> classDetails<span class="token punctuation">.</span>benches<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> classBlackBoard <span class="token operator">=</span> classDetails<span class="token punctuation">.</span>blackBoard<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ví dụ tương tự sử dụng cấu trúc đối tượng:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> classDetails <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">strength</span><span class="token operator">:</span> <span class="token number">78</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">benches</span><span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">blackBoard</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">strength</span><span class="token operator">:</span> classStrength<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">benches</span><span class="token operator">:</span> classBenches<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">blackBoard</span><span class="token operator">:</span> classBlackBoard<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token operator">=</span> classDetails<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>classStrength<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs 78</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>classBenches<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs 39</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>classBlackBoard<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Như mọi người có thể thấy, bằng cách sử dụng cấu trúc đối tượng, ta đã trích xuất tất cả các phần tử bên trong một đối tượng trong một dòng code.</p><p>Nếu chúng ta muốn biến mới của mình có cùng tên với thuộc tính của một đối tượng, chúng ta có thể bỏ dấu hai chấm:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">strength</span><span class="token operator">:</span> strength <span class="token punctuation">}</span> <span class="token operator">=</span> classDetails<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// The above line of code can be written as:</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> strength <span class="token punctuation">}</span> <span class="token operator">=</span> classDetails<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cau-truc-mang" tabindex="-1"><a class="header-anchor" href="#cau-truc-mang"><span>Cấu trúc mảng:</span></a></h4><p>Trước ES6:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> first <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> second <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> third <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> fourth <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sau có ES6:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> third<span class="token punctuation">,</span> fourth<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs 1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs 2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>third<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs 3</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fourth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_30-temporal-dead-zone-la-gi" tabindex="-1"><a class="header-anchor" href="#_30-temporal-dead-zone-la-gi"><span>30. Temporal Dead Zone là gì?</span></a></h3><p>Temporal Dead Zone là hành vi xảy ra với khai báo biến sử dụng <strong>let</strong> hoặc <strong>const</strong>.</p><p>Nó là hành vi xảy ra khi ta truy cập một biến trước khi khởi tạo.</p><p>Ví dụ:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">x <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span> <span class="token comment">// Gives reference error</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> x<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">anotherRandomFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  message <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Throws a reference error</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> message<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">anotherRandomFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong đoạn code trên, cả trong global scope và function scope, ta đang cố gắng truy cập các biến chưa được khai báo. Đây được gọi là Temporal Dead Zone.</p>`,386)]))}const b=s(v,[["render",h],["__file","index.html.vue"]]),y=JSON.parse('{"path":"/vi/others/references/ren0503-fullstack-interviews/frontend/javascript/","title":"Câu hỏi phỏng vấn JavaScript","lang":"vi-VN","frontmatter":{"head":[["title",{},"Câu hỏi phỏng vấn JavaScript - Vu T. Nguyen"]]},"headers":[{"level":2,"title":"Câu hỏi dành cho Fresher","slug":"cau-hoi-danh-cho-fresher","link":"#cau-hoi-danh-cho-fresher","children":[{"level":3,"title":"1. Sự khác biệt giữa các kiểu dữ liệu trong JavaScript?","slug":"_1-su-khac-biet-giua-cac-kieu-du-lieu-trong-javascript","link":"#_1-su-khac-biet-giua-cac-kieu-du-lieu-trong-javascript","children":[]},{"level":3,"title":"2. Giải thích về Hoisting trong Javascript?","slug":"_2-giai-thich-ve-hoisting-trong-javascript","link":"#_2-giai-thich-ve-hoisting-trong-javascript","children":[]},{"level":3,"title":"3. Sự khác biệt giữa toán tử \\"==\\" và \\"===\\" là như thế nào?","slug":"_3-su-khac-biet-giua-toan-tu-va-la-nhu-the-nao","link":"#_3-su-khac-biet-giua-toan-tu-va-la-nhu-the-nao","children":[]},{"level":3,"title":"4. Giải thích về ép kiểu ngầm trong JavaScript?","slug":"_4-giai-thich-ve-ep-kieu-ngam-trong-javascript","link":"#_4-giai-thich-ve-ep-kieu-ngam-trong-javascript","children":[]},{"level":3,"title":"5. JavaScript là ngôn ngữ kiểu tĩnh hay kiểu động?","slug":"_5-javascript-la-ngon-ngu-kieu-tinh-hay-kieu-đong","link":"#_5-javascript-la-ngon-ngu-kieu-tinh-hay-kieu-đong","children":[]},{"level":3,"title":"6. Thuộc tính NaN trong JavaScript là gì?","slug":"_6-thuoc-tinh-nan-trong-javascript-la-gi","link":"#_6-thuoc-tinh-nan-trong-javascript-la-gi","children":[]},{"level":3,"title":"7. Giải thích về phép gán quá giá trị và phép gán qua tham chiếu?","slug":"_7-giai-thich-ve-phep-gan-qua-gia-tri-va-phep-gan-qua-tham-chieu","link":"#_7-giai-thich-ve-phep-gan-qua-gia-tri-va-phep-gan-qua-tham-chieu","children":[]},{"level":3,"title":"8. IIFE là gì trong JavaScript?","slug":"_8-iife-la-gi-trong-javascript","link":"#_8-iife-la-gi-trong-javascript","children":[]},{"level":3,"title":"9. Giải thích về HOC(Higher Order Functions) trong JavaScript?","slug":"_9-giai-thich-ve-hoc-higher-order-functions-trong-javascript","link":"#_9-giai-thich-ve-hoc-higher-order-functions-trong-javascript","children":[]},{"level":3,"title":"10. Giải thích về \\"this\\"?","slug":"_10-giai-thich-ve-this","link":"#_10-giai-thich-ve-this","children":[]},{"level":3,"title":"11. Giải thích về phương thức call(), aplly() và bind()?","slug":"_11-giai-thich-ve-phuong-thuc-call-aplly-va-bind","link":"#_11-giai-thich-ve-phuong-thuc-call-aplly-va-bind","children":[]},{"level":3,"title":"12. Currying trong JavaScript là gì?","slug":"_12-currying-trong-javascript-la-gi","link":"#_12-currying-trong-javascript-la-gi","children":[]},{"level":3,"title":"13. Giải thích về Scope và Scope Chain?","slug":"_13-giai-thich-ve-scope-va-scope-chain","link":"#_13-giai-thich-ve-scope-va-scope-chain","children":[]},{"level":3,"title":"14. Giải thích về Closures trong JavaScript?","slug":"_14-giai-thich-ve-closures-trong-javascript","link":"#_14-giai-thich-ve-closures-trong-javascript","children":[]},{"level":3,"title":"15. Prototype là gì?","slug":"_15-prototype-la-gi","link":"#_15-prototype-la-gi","children":[]},{"level":3,"title":"16. Callback là gì?","slug":"_16-callback-la-gi","link":"#_16-callback-la-gi","children":[]},{"level":3,"title":"17. Memoization là gì?","slug":"_17-memoization-la-gi","link":"#_17-memoization-la-gi","children":[]},{"level":3,"title":"18. Đệ quy là gì?","slug":"_18-đe-quy-la-gi","link":"#_18-đe-quy-la-gi","children":[]},{"level":3,"title":"19. Hàm khởi tạo trong JavaScript","slug":"_19-ham-khoi-tao-trong-javascript","link":"#_19-ham-khoi-tao-trong-javascript","children":[]},{"level":3,"title":"20. DOM là gì?","slug":"_20-dom-la-gi","link":"#_20-dom-la-gi","children":[]}]},{"level":2,"title":"Câu hỏi dành cho Experiencer","slug":"cau-hoi-danh-cho-experiencer","link":"#cau-hoi-danh-cho-experiencer","children":[{"level":3,"title":"21. Hàm arrow là gì?","slug":"_21-ham-arrow-la-gi","link":"#_21-ham-arrow-la-gi","children":[]},{"level":3,"title":"22. Sự khác biết của biến dùng var, let và const","slug":"_22-su-khac-biet-cua-bien-dung-var-let-va-const","link":"#_22-su-khac-biet-cua-bien-dung-var-let-va-const","children":[]},{"level":3,"title":"23. Tham số còn lại và toán tử spread là gì?","slug":"_23-tham-so-con-lai-va-toan-tu-spread-la-gi","link":"#_23-tham-so-con-lai-va-toan-tu-spread-la-gi","children":[]},{"level":3,"title":"24 Sử dụng Promise trong JavaScript","slug":"_24-su-dung-promise-trong-javascript","link":"#_24-su-dung-promise-trong-javascript","children":[]},{"level":3,"title":"25. Lớp trong JavaScript?","slug":"_25-lop-trong-javascript","link":"#_25-lop-trong-javascript","children":[]},{"level":3,"title":"26. Hàm generator là gì?","slug":"_26-ham-generator-la-gi","link":"#_26-ham-generator-la-gi","children":[]},{"level":3,"title":"27. Giải thích WeakSet trong JavaScript","slug":"_27-giai-thich-weakset-trong-javascript","link":"#_27-giai-thich-weakset-trong-javascript","children":[]},{"level":3,"title":"28. Giải thích về WeakMap trong JavaScript","slug":"_28-giai-thich-ve-weakmap-trong-javascript","link":"#_28-giai-thich-ve-weakmap-trong-javascript","children":[]},{"level":3,"title":"29. Cấu trúc đối tượng là gì?","slug":"_29-cau-truc-đoi-tuong-la-gi","link":"#_29-cau-truc-đoi-tuong-la-gi","children":[]},{"level":3,"title":"30. Temporal Dead Zone là gì?","slug":"_30-temporal-dead-zone-la-gi","link":"#_30-temporal-dead-zone-la-gi","children":[]}]}],"git":{},"filePathRelative":"vi/others/references/ren0503-fullstack-interviews/frontend/javascript/index.md"}');export{b as comp,y as data};
